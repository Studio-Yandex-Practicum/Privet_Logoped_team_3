# Generated by Django 3.2 on 2024-08-11 07:33

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('api', '0002_userquestion'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.CharField(max_length=50, unique=True, verbose_name='ID пользователя')),
                ('platform', models.CharField(choices=[('telegram', 'Telegram'), ('vk', 'VK')], max_length=50, verbose_name='Платформа')),
                ('role', models.CharField(choices=[('parent', 'Родитель'), ('logoped', 'Логопед')], default='parent', max_length=50, verbose_name='Роль')),
                ('groups', models.ManyToManyField(blank=True, help_text='Группы, к которым принадлежит этот пользователь.', related_name='customuser_set', to='auth.Group', verbose_name='Группы')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Специфические права доступа для этого пользователя.', related_name='customuser_set', to='auth.Permission', verbose_name='Разрешения')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.RemoveField(
            model_name='customuser',
            name='groups',
        ),
        migrations.RemoveField(
            model_name='customuser',
            name='user_permissions',
        ),
        migrations.AddField(
            model_name='content',
            name='date_created',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания'),
        ),
        migrations.AlterField(
            model_name='content',
            name='code_gift',
            field=models.CharField(max_length=255, verbose_name='Код подарка'),
        ),
        migrations.AlterField(
            model_name='content',
            name='help_install_file',
            field=models.FileField(upload_to='content/', verbose_name='Файл помощи по установке'),
        ),
        migrations.AlterField(
            model_name='content',
            name='ios_payment',
            field=models.FileField(upload_to='content/', verbose_name='Файл оплаты для iOS'),
        ),
        migrations.AlterField(
            model_name='content',
            name='payment_url',
            field=models.URLField(verbose_name='URL оплаты'),
        ),
        migrations.AlterField(
            model_name='content',
            name='present_on_pk',
            field=models.FileField(upload_to='content/', verbose_name='Файл для ПК'),
        ),
        migrations.AlterField(
            model_name='content',
            name='track_file',
            field=models.FileField(upload_to='content/', verbose_name='Файл для отслеживания'),
        ),
        migrations.AlterField(
            model_name='content',
            name='url_gift',
            field=models.URLField(blank=True, null=True, verbose_name='URL подарка'),
        ),
        migrations.AlterField(
            model_name='content',
            name='usefull_url',
            field=models.URLField(verbose_name='Полезная ссылка'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='days_of_week',
            field=models.CharField(max_length=50, verbose_name='Дни недели'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='diff_to_msk',
            field=models.IntegerField(verbose_name='Разница с МСК'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='platform',
            field=models.CharField(choices=[('telegram', 'Telegram'), ('vk', 'VK')], max_length=50, verbose_name='Платформа'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='time',
            field=models.TimeField(verbose_name='Время'),
        ),
        migrations.DeleteModel(
            name='UserQuestion',
        ),
        migrations.AlterField(
            model_name='notification',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.userprofile', verbose_name='Пользователь'),
        ),
        migrations.DeleteModel(
            name='CustomUser',
        ),
    ]
