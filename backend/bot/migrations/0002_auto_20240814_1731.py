# Generated by Django 3.2.16 on 2024-08-14 14:31

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('bot', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='content',
            options={'ordering': ('-date_created',), 'verbose_name': 'Content', 'verbose_name_plural': 'Content'},
        ),
        migrations.AlterModelOptions(
            name='notification',
            options={'ordering': ('time',), 'verbose_name': 'Напоминания', 'verbose_name_plural': 'Напоминание'},
        ),
        migrations.AlterModelManagers(
            name='userprofile',
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.RemoveField(
            model_name='content',
            name='date',
        ),
        migrations.RemoveField(
            model_name='content',
            name='present_on_PK',
        ),
        migrations.AddField(
            model_name='content',
            name='date_created',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания'),
        ),
        migrations.AddField(
            model_name='content',
            name='present_on_pk',
            field=models.FileField(blank=True, null=True, upload_to='content/', verbose_name='Файл для ПК'),
        ),
        migrations.AddField(
            model_name='notification',
            name='diff_to_msk',
            field=models.IntegerField(default=0, verbose_name='Разница с МСК'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='date_joined',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='email',
            field=models.EmailField(blank=True, max_length=254, verbose_name='email address'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='first_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='first name'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='last_login',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='last_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='last name'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='password',
            field=models.CharField(default='Admin', max_length=128, verbose_name='password'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Специфические права доступа для этого пользователя.', related_name='customuser_set', to='auth.Permission', verbose_name='Разрешения'),
        ),
        migrations.AlterField(
            model_name='content',
            name='code_gift',
            field=models.CharField(max_length=255, verbose_name='Код подарка'),
        ),
        migrations.AlterField(
            model_name='content',
            name='help_install_file',
            field=models.FileField(upload_to='content/', verbose_name='Файл помощи по установке'),
        ),
        migrations.AlterField(
            model_name='content',
            name='ios_payment',
            field=models.FileField(upload_to='content/', verbose_name='Файл оплаты для iOS'),
        ),
        migrations.AlterField(
            model_name='content',
            name='payment_url',
            field=models.URLField(blank=True, null=True, verbose_name='URL оплаты'),
        ),
        migrations.AlterField(
            model_name='content',
            name='track_file',
            field=models.FileField(upload_to='content/', verbose_name='Файл для отслеживания'),
        ),
        migrations.AlterField(
            model_name='content',
            name='url_gift',
            field=models.URLField(blank=True, null=True, verbose_name='URL подарка'),
        ),
        migrations.AlterField(
            model_name='content',
            name='usefull_url',
            field=models.URLField(verbose_name='Полезная ссылка'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='days_of_week',
            field=models.CharField(choices=[('monday', 'Понедельник'), ('tuesday', 'Вторник'), ('wednesday', 'Среда'), ('thursday', 'Четверг'), ('friday', 'Пятница'), ('saturday', 'Суббота'), ('sunday', 'Воскресенье')], max_length=50, verbose_name='Дни недели'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='platform',
            field=models.CharField(choices=[('telegram', 'Telegram'), ('vk', 'VK')], max_length=50, verbose_name='Платформа'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='time',
            field=models.TimeField(verbose_name='Время'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь'),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='platform',
            field=models.CharField(choices=[('telegram', 'Telegram'), ('vk', 'VK')], max_length=50, verbose_name='Платформа'),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='role',
            field=models.CharField(choices=[('parent', 'Родитель'), ('logoped', 'Логопед')], default='parent', max_length=50, verbose_name='Роль'),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='user_id',
            field=models.CharField(max_length=50, unique=True, verbose_name='ID пользователя'),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='username',
            field=models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['platform'], name='bot_notific_platfor_ac006c_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['time'], name='bot_notific_time_233a92_idx'),
        ),
    ]
